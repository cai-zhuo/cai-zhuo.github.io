<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://czh.im</id>
    <title>CZh.IM</title>
    <updated>2020-10-30T04:46:35.545Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://czh.im"/>
    <link rel="self" href="https://czh.im/atom.xml"/>
    <subtitle>watching myself</subtitle>
    <logo>https://czh.im/images/avatar.png</logo>
    <icon>https://czh.im/favicon.ico</icon>
    <rights>All rights reserved 2020, CZh.IM</rights>
    <entry>
        <title type="html"><![CDATA[# Async 异步函数书写习惯]]></title>
        <id>https://czh.im/post/async-yi-bu-han-shu-shu-xie-xi-guan/</id>
        <link href="https://czh.im/post/async-yi-bu-han-shu-shu-xie-xi-guan/">
        </link>
        <updated>2020-10-30T04:45:21.000Z</updated>
        <content type="html"><![CDATA[<p>原理不做解释，请查文档</p>
<p>平时 async，await 的书写习惯的不同，会导致任务的表现不同</p>
<pre><code class="language-js">// 两个计时函数之间是阻塞的
async function syncWait() {
  console.time('阻塞执行 syncWait');

  await wait(500);
  await wait(500);

  console.timeEnd('阻塞执行 syncWait');
}

// 两个计时函数之间是非阻塞的
async function asyncWait() {
  console.time('非阻塞执行 asyncWait');
  
  const timeout1 = wait(500);
  const timeout2 = wait(500);

  await timeout1;
  await timeout2;

  console.timeEnd('非阻塞执行 asyncWait');
}

async function wait(time) {
  return new Promise((resolve) =&gt; {
    setTimeout(() =&gt; {
      resolve('timeout');
    }, time);
  });
}

syncWait();
asyncWait();

</code></pre>
<blockquote>
<p>非阻塞执行 asyncWait: 505.733ms</p>
<p>阻塞执行 syncWait: 1011.382ms</p>
</blockquote>
<p>当有多个异步操作的情景下，书写习惯习惯是这样的</p>
<pre><code class="language-js">async function multiAsyncOpt(){
  const { data:info } = await api.get('/getInfo');
  const { data:detail } = await api.get('/getDetail');
  return [info,detail];
}
</code></pre>
<p>但是这样书写，multiAsyncOpt 的花费总时长是两个异步函数时长的总和，即</p>
<blockquote>
<p>time( multiAsyncOpt ) = time( getInfo ) + time( getDetail )</p>
</blockquote>
<p>所以我们可以这样书写</p>
<pre><code class="language-js">async function multiAsyncOpt(){
	const getInfo = api.get('/getInfo');  
  const getDetail = api.get('/getDetail');
  
  const { data:info } = await getInfo;
  const { data:detail } = await getDetail;
  
  return [info,detail]
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对图片进行转码（DataURL）]]></title>
        <id>https://czh.im/post/dui-tu-pian-jin-xing-zhuan-ma-dataurl/</id>
        <link href="https://czh.im/post/dui-tu-pian-jin-xing-zhuan-ma-dataurl/">
        </link>
        <updated>2020-10-29T02:48:34.000Z</updated>
        <content type="html"><![CDATA[<p>对图片进行转码，是一种常见的操作，用来减少应用加载过程中，网络请求的数量。</p>
<pre><code class="language-html">&lt;img src=&quot;data:image/svg+xml;base64,[data]&quot;&gt;
</code></pre>
<p>在 src 所指定的字符串中，是一段 base64 编码的字符串。我们称这一段字符串为 DataURL</p>
<ul>
<li>优点
<ol>
<li>减少HTTP请求</li>
<li>cpu的计算速度 要快于 网络请求的速度</li>
</ol>
</li>
<li>缺点
<ol>
<li>与来自外部 <code>src</code> 的图像相比，在移动设备上 Data URI 格式图像的显示速度要<a href="https://www.mobify.com/blog/data-uris-are-slow-on-mobile/">慢得多</a>。</li>
<li>Data URI 会显著增加 HTML 请求的大小。</li>
<li>Data URI 会增加HTML标记和工作流的复杂性。</li>
<li>Data URI 格式的图像比二进制格式的图像大很多（最多大 <strong>30%</strong>），因此不会减小总下载大小。</li>
<li>Data URI 无法缓存，因此必须为使用它们的每一个页面分别进行下载。</li>
<li>IE 6 和 7 不支持 Data URI，IE8 仅提供有限支持。</li>
<li>对于 HTTP/2，减少请求的次数并不是优化网络的优先策略。</li>
</ol>
</li>
</ul>
<p>所以对图片的转码还应视情景而定。可以对小图片进行转码，比如在webpack的 url-loader 中，经常会对小于10kb的图片进行DataURL转码，来减少网络请求。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[响应式图片]]></title>
        <id>https://czh.im/post/xiang-ying-shi-tu-pian/</id>
        <link href="https://czh.im/post/xiang-ying-shi-tu-pian/">
        </link>
        <updated>2020-10-27T15:01:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="devicepixelratio-像素设备比">devicePixelRatio 像素设备比</h2>
<p>devicePixelRatio = 物理像素数量 / dips</p>
<p>dips 是 设备独立像素，可以理解为 css 的逻辑像素，可以通过 srceen.width * screen.height 或者 document.documentElement.clientWidth * document.documentElement.clientHeight 获取</p>
<p>在 IOS 上 一般值为 1 或 2 。(但是IPhoneX貌似为3)<br>
假设 dips 为 1400x900 。即使 在 retina-mac 上更改了分辨率，由 2800 * 1800 改为 1920x120。<br>
devicePixelRatio 仍然为 2，而不是1.5。</p>
<p>在 Android 上，由于不同浏览器厂商有不同的策略，可以直接按公式来计算。</p>
<h2 id="实现不同分辨率的情景下使用不同的图片">实现不同分辨率的情景下使用不同的图片</h2>
<p>srcset 属性可以用来在不同分辨率设备上使用不同图片<br>
达到在不同设备上使用不同大小图片的效果，以节省带宽以及流量，获得更好地体验<br>
<img src="https://czh.im/post-images/1603902659467.png" alt="" loading="lazy"><br>
一般会配合 媒体查询 使用，因为在移动端的 retina 屏幕上，devicePixelRatio 也是2。</p>
<h2 id="w-描述符">w 描述符</h2>
<p>w 描述符前的数字代表浏览器提供多少物理像素来渲染图片，而 sizes 属性的值代表图片的逻辑像素大小。<br>
最后计算的结果为 w / sizes = deviceDensity 得到了 像素密度。<br>
这个像素密度就用来计算图片一个逻辑像素包含了多少物理像素。</p>
<p>像素密度的概念和像素设备比的概念其实是相同的，只不过像素密度是专注于局部的元素，而像素设备比是专注于浏览器全局。<br>
最后浏览器会用计算出来的像素密度和 window.divicePixelRatio 作比较，只有大于 window.devicePixelRatio 的规则，才会被使用。</p>
<h2 id="利用w描述符实现不同宽度设备加载不同图片">利用w描述符实现不同宽度设备加载不同图片</h2>
<pre><code class="language-html">    &lt;img src=&quot;./tiny-WechatIMG6.jpeg&quot; srcset=&quot;./tiny-WechatIMG6.jpeg 500w, ./WechatIMG6.jpeg 1000w&quot; sizes=&quot;500px&quot; width=&quot;500&quot;/&gt;
</code></pre>
<p>在  devicePixelRatio 为 1 的时候 会使用 tiny-WechatIMG6.jpeg<br>
在  devicePixelRatio 为 2 的时候 会使用 tiny-WechatIMG6.jpeg</p>
<p>而另一种情况</p>
<pre><code class="language-html">   &lt;img src=&quot;./tiny-WechatIMG6.jpeg&quot; srcset=&quot;./tiny-WechatIMG6.jpeg 2000w, ./WechatIMG6.jpeg 3000w&quot; sizes=&quot;1000px&quot; width=&quot;500&quot;/&gt;
</code></pre>
<p>浏览器会将两张图片都加载，因为 两个像素密度都大于了 devicePixelRatio</p>
<h2 id="利用w描述符实现响应式图片">利用w描述符实现响应式图片</h2>
<pre><code class="language-js">/*
   响应式图片 利用 w 描述符 来计算像素密度
   设 img 中 sizes 规定的大小为 资源大小
   设 img 中 w 描述符 规定的大小为 描述大小
   计算过程为 描述大小 / 资源大小
   计算结果为 像素密度 也就是 x描述符的值

   假设该图片大小为 5068，资源大小默认为 窗口宽度(821)，指定为窗口宽度是为了让图片宽度等同于屏幕宽度
   计算结果约为 6.172，也就是一个逻辑像素需要6.172个物理像素来熏染

*/
function loadResponsiveImage(src, sizes) {
  const img = new Image();

  img.src = src;
  img.srcset = `${src} ${img.naturalWidth}w`;
  img.sizes = sizes + 'px';
  document.getElementById('responsiveBox').appendChild(img);
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://czh.im/post-images/1603811012740.png" alt="" loading="lazy"></figure>
<h2 id="svg">SVG</h2>
<p>当想使用响应式图片的时候，可以使用SVG来达到相同的效果，在移动端设备和桌面设备上SVG同样有很好的支持。<br>
对SVG可以进行压缩，使用 <a href="https://sarasoueidan.com/blog/svgo-tools/">优化工具</a> 可以显著减少SVG图片的大小</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[V8中形状和内联缓存是如何优化对象和数组的访问的]]></title>
        <id>https://czh.im/post/v8-zhong-xing-zhuang-he-nei-lian-huan-cun-shi-ru-he-you-hua-dui-xiang-he-shu-zu-de-fang-wen-de/</id>
        <link href="https://czh.im/post/v8-zhong-xing-zhuang-he-nei-lian-huan-cun-shi-ru-he-you-hua-dui-xiang-he-shu-zu-de-fang-wen-de/">
        </link>
        <updated>2020-10-27T04:40:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="javascript-引擎工作流程">JavaScript 引擎工作流程</h2>
<p>在 V8 中，JS引擎的工作流程如下，从源代码开始，由编译器解析成 AST，再交由解释器生成<strong>字节码</strong>。</p>
<p>为了使得代码运行的更快，V8 内部会将字节码和分析数据( profiling data ) 一起发送给 优化编译器，生成优化过的<strong>机器码</strong>。当生成的机器码在运行之前被假定为不正确的，会重新回退生成字节码。</p>
<figure data-type="image" tabindex="1"><img src="https://czh.im/post-images/1603811139477.svg" alt="" loading="lazy"></figure>
<ol>
<li>一般的 JS 引擎都会有一个解释器和优化编译器。其中解释器可以快速生成为优化的字节码，优化编译器会使用<strong>更长的时间</strong>生成<strong>运行更快</strong>的机器码</li>
<li>V8 的解释器被叫做 <strong>Ignition</strong>，优化编译器叫做<strong>Turbofan</strong></li>
</ol>
<h2 id="javascript-对象模型object-model">JavaScript 对象模型(Object Model)</h2>
<ol>
<li>
<p>属性的访问</p>
<p>在 ECMA 的规范中，所有JavaScript 的对象的键值对都会映射到一个叫 property 的字典表中。</p>
</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://czh.im/post-images/1603811145711.svg" alt="" loading="lazy"></figure>
<p>除 <code>[[Value]]</code> 外，规范还定义了如下属性：</p>
<ul>
<li>
<p><code>[[Writable]]</code> 决定该属性是否可写</p>
</li>
<li>
<p><code>[[Enumerable]]</code> 决定对象是否可被遍历</p>
</li>
<li>
<p><code>[[Configurable]]</code> 决定该属性是否可被删除。</p>
<p>参考 MDN 对象元属性。</p>
</li>
</ul>
<p>[[ 双方括号 ]] 表示 引擎不会暴露给 JavaScript 的属性，但是可以通过 Object.getOwnPropertyDescriptor 来访问到。</p>
<p>在数组中也一样。数组就是特殊的对象。</p>
<ol start="2">
<li>
<p>属性访问的优化</p>
<p>在 JavaScript 中，对象的属性访问是最常见的操作，并且这个操作的速度将很大的影响程序运行的错误。</p>
<p>在实现上，引擎采用了一个形状（也叫 隐藏类）的机制。</p>
</li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://czh.im/post-images/1603811153746.svg" alt="" loading="lazy"></figure>
<p>具有相同属性名，并且顺序一样的对象会指向相同的 <strong>形状</strong>。形状记录了 除 [[value]] 以外的元信息，以及一个offset的整型属性。</p>
<p>而原本的对象只需要记录所有的值，存在一个列表中，访问时通过偏移量来访问即可。<strong>无论有多少个对象，只要它们具有相同的形状，我们只需要将它们的形状与键值属性信息存储一次</strong> 。</p>
<ol start="3">
<li>
<p>Transition 链和树</p>
<pre><code class="language-js">const object = {};
object.x = 5;
object.y = 6;
</code></pre>
<p>当代码中有这样的操作时，就会形成一个 transition链。</p>
<p>该对象在初始化时没有任何属性，因此它指向一个空的 shape。</p>
</li>
</ol>
<figure data-type="image" tabindex="4"><img src="https://czh.im/post-images/1603811162695.svg" alt="" loading="lazy"></figure>
<p>下一个语句为该对象添加值为 <code>5</code> 的属性 <code>“x”</code>，所以 JavaScript 引擎转向一个包含属性 <code>“x”</code> 的 Shape，并向 <code>JSObject</code> 的第一个偏移量为0处添加了一个值 <code>5</code>。</p>
<p>接下来一个语句添加了一个属性 <code>'y'</code>，引擎便转向另一个包含 <code>'x'</code> 和 <code>'y'</code> 的 Shape，并将值 <code>6</code> 附加到 <code>JSObject</code>（位于偏移量 <code>1</code> 处）。</p>
<p>我们不需要为每个 Shape 存储完整的属性表。相反，每个 Shape 只需要知道它引入的新属性。</p>
<pre><code>例如在此例中，我们不必在最后一个 Shape 中存储关于 `'x'` 的信息，因为它可以在更早的链上被找到。要做到这一点，每一个 Shape 都会与其之前的 Shape 相连。
</code></pre>
<pre><code class="language-js">const object1 = {};
object1.x = 5;
const object2 = {};
object2.y = 6;
</code></pre>
<p>而在这种情况下，我们必须进行分支操作。</p>
<figure data-type="image" tabindex="5"><img src="https://czh.im/post-images/1603811169890.svg" alt="" loading="lazy"></figure>
<p>形状的生成也并不意味着，总从空形状开始，这取决于一开始定义对象的值。</p>
<h2 id="内联缓存inline-caches-or-ics">内联缓存(inline caches or ICs)</h2>
<pre><code class="language-js">function getX(o) {
	return o.x;
}
</code></pre>
<p>当有了形状的机制，就可以为函数的参数访问进行优化</p>
<figure data-type="image" tabindex="6"><img src="https://czh.im/post-images/1603811177764.svg" alt="" loading="lazy"></figure>
<p>getX会被解析为两条指令</p>
<ul>
<li><code>get_by_id</code> 从第一个参数（<code>arg1</code>）中加载属性 <code>'x'</code> 值并将其存储到地址 <code>loc0</code> 中。</li>
<li><code>return loc0</code>  返回我们存储到 <code>loc0</code> 中的内容。</li>
</ul>
<p>引擎会将两个值嵌入到 <code>get_by_id</code> 指令中， shape 和偏移量。这样在下次查找参数的值时，如果形状没有发生改变，就可以直接通过偏移量来查找，跳过费时的属性信息查找，这比每次查找属性要快得多</p>
<h2 id="高效存储数组">高效存储数组</h2>
<pre><code class="language-js">const array = [
	'#jsconfeu',
];
</code></pre>
<p>考虑如上数组。</p>
<figure data-type="image" tabindex="7"><img src="https://czh.im/post-images/1603811187226.svg" alt="" loading="lazy"></figure>
<p>每个数组都有一个单独的 <em>elements backing store</em>，其中包含所有数组索引的属性值。JavaScript 引擎不必为数组元素存储任何属性特性，因为它们通常都是可写的，可枚举的以及可配置的。JavaScript 引擎利用这一点，将数组元素与其他命名属性分开存储。</p>
<p>由于上述操作将 数组元素的属性当做了默认的属性。所以讲数组元素放进 Elements 列表来处理。如果改变了数组元素的元属性呢</p>
<pre><code class="language-js">const array = Object.defineProperty(
	[],
	'0',
	{
		value: 'Oh noes!!1',
		writable: false,
		enumerable: false,
		configurable: false,
	}
);
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://czh.im/post-images/1603811193116.svg" alt="" loading="lazy"></figure>
<p>不要这样做，这样会导致 数组的元素 存放在一个 字典表里面（Dictionary Elements），这种方式来查找数组元素是缓慢且低效的。</p>
<p>因为不是通过下标偏移量来查找，而是当做了类似于普通对象的键值对查找，每个下标都对应一个属性特性 ( property attributes )</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端工程化搭建 错误记录]]></title>
        <id>https://czh.im/post/qian-duan-gong-cheng-hua-da-jian-cuo-wu-ji-lu/</id>
        <link href="https://czh.im/post/qian-duan-gong-cheng-hua-da-jian-cuo-wu-ji-lu/">
        </link>
        <updated>2020-09-02T01:28:16.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>webpack 插件中，正确的html插件为 html-webpack-plugin , 而 webpack-html-plugin 会报错。</li>
<li>在使用 @typescript-eslint 时，eslintrc.js 文件中<br>
project 字段为 './tsconfig.json' ,但是此时会报一个编译错误。</li>
</ol>
<pre><code class="language-cmd">0:0  error  Parsing error: &quot;parserOptions.project&quot; has been set for
@typescript-eslint/parser.
The file does not match your project config: .eslintrc.js.
The file must be included in at least one of the projects provided
</code></pre>
<p>这个问题在 @typescript-eslint 的 github 上，作为 issue 已经被解决，但是在我这里仍然出现了问题，可能是版本问题。<br>
解决方法：</p>
<ol>
<li>正确的配置 tsconfig.json 中的 include 字段，确保只包含项目中的文件。</li>
<li>使用 extends 字段让 eslint 进行扩展。<br>
(详情)[https://github.com/typescript-eslint/typescript-eslint/issues/1159]</li>
<li>在 eslintrc.js 中 parserOptions 字段下 添加 createDefaultProgram: true<br>
这个方法可能会影响 IDE 使用相关eslint插件时的性能，但是可以解决上述问题。<br>
(详情)[https://github.com/typescript-eslint/typescript-eslint/issues/864]</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[react 配置 less]]></title>
        <id>https://czh.im/post/react-pei-zhi-less/</id>
        <link href="https://czh.im/post/react-pei-zhi-less/">
        </link>
        <updated>2020-06-04T11:33:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="导出webpack配置文件">导出webpack配置文件</h1>
<blockquote>
<p>yarn run eject<br>
在生成的config目录下修改webpack.config.js<br>
在 rules 中 cassLoader 下添加</p>
</blockquote>
<pre><code class="language-js">    let lessRegex = /\.less$/;
    let lessModuleRegex = /\.module\.less$/;
    //...
    {
            test:lessRegex,
            exclude: lessModuleRegex,
            use: getStyleLoaders(
                {
                    importLoaders: 3,
                    sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,
                },
                'less-loader'
            )
    },
    {
              test: lessModuleRegex,
              use: getStyleLoaders(
                  {
                    importLoaders: 3,
                    sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,
                    localsConvention: 'camelCase',
                    modules: {
                      getLocalIdent: getCSSModuleLocalIdent,
                    },
                  },
                  'less-loader',
              ),
            },
</code></pre>
<p>正常来说 css-modules ，文件命名为 index.module.less<br>
如果使 index.less 也具有 css-modules 的效果，就将 lessModuleRegex 换成 lessRegex ，并且去掉上一个 lessLoader 模块。</p>
<blockquote>
<p>yarn run start</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[有关浏览器渲染（Compositing）]]></title>
        <id>https://czh.im/post/you-guan-liu-lan-qi-xuan-ran-compositing/</id>
        <link href="https://czh.im/post/you-guan-liu-lan-qi-xuan-ran-compositing/">
        </link>
        <updated>2020-05-20T05:32:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="浏览器渲染的过程">浏览器渲染的过程</h2>
<p>当浏览器拿到HTTP响应的HTML文件时，会去解析HTML的DOM结构。生成DOM Tree</p>
<p>对于解析到的link 标签，会进行并行下载，下载完成后解析，style标签会直接解析，link,style标签中的样式资源会生成 CSS Rule Tree。</p>
<p>而script标签分为三种情况。</p>
<ul>
<li>default	同步下载，暂停解析DOM结构</li>
<li>defer	异步下载，DOM解析完毕以后，执行JS文件</li>
<li>async     异步下载，下载完毕立即执行JS文件</li>
</ul>
<p>当浏览器启动渲染时，会走一个如下的机制。</p>
<p>​																		<br>
JS(AST,JIT)	--&gt;	宏脚本执行	--&gt;	Micro Task	--&gt;	Macro Task	--&gt;</p>
<p>DOM Tree + CSS Rule Tree	--&gt;	Render Tree	--&gt;	Layout	--&gt;	Paint	--&gt;	Compositing</p>
<ul>
<li>Render Tree	由Dom和CSS计算出的dom节点应具有的样式树</li>
<li>Layout      计算Dom节点的布局</li>
<li>Paint         计算DOm节点的渲染样式</li>
<li>Compositing   计算整个渲染过程可以分为几个图层，有合成器线程来执行。</li>
</ul>
<p>在这个过程执行完毕，又会回到Event Loop阶段，如果发生了对Dom的操作，将会判断回不回去走后续的流程，否则会一直循环在Event Loop。比如：</p>
<ul>
<li>Dom的布局发生了变化，会到Layout阶段（回流/reflow）</li>
<li>Dom的某些不影响布局的样式发生变化，回到Paint阶段（重绘/repaint）</li>
<li>对于那些属性会触发回流或者重绘，可以参考
<ul>
<li>https://www.html5rocks.com/zh/tutorials/speed/high-performance-animations/</li>
</ul>
</li>
</ul>
<p>对于Compositing阶段，浏览器中的Render Process，会分出一个 合成器线程，将整个渲染页面分多个图层来绘制（光栅化），然后将每个图层的纹理都交给GPU来渲染，不去让CPU计算渲染像素的规则，达到“加速”渲染的效果。</p>
<p>我们常用的CSS硬件加速（GPU加速）就是上述所说的策略</p>
<p>出发该策略有很多种方式，但也很复杂。我们可以采用最简单的一种方式。</p>
<ul>
<li>触发CSS的3D变换</li>
</ul>
<pre><code class="language-css">.cube {
   -webkit-transform: translateZ(0);
   -moz-transform: translateZ(0);
   -ms-transform: translateZ(0);
   -o-transform: translateZ(0);
   transform: translateZ(0);
   /* Other transform properties here */
}
</code></pre>
<blockquote>
<p>https://www.cnblogs.com/rubylouvre/p/3471490.html</p>
</blockquote>
<ul>
<li>will-change属性</li>
</ul>
<pre><code class="language-css">div{
  will-change:auto;	
}
/*
	will-change 的值是告诉浏览器有哪些属性会变化，auto就是让浏览器自己判断。
*/
</code></pre>
<h2 id="调试">调试</h2>
<p>对于浏览器渲染的调试，我们可以打开开发者工具</p>
<ul>
<li>按下ESC，在console旁边有 三个点 的可点击区域</li>
<li>点击 Rendering</li>
<li>勾选 Paint Flashing，Layout ，Layer</li>
</ul>
<p>我们就可以分别看到 重绘，回流，和 分层 的情况了。</p>
<h2 id="补充">补充</h2>
<p>在浏览器的某些事件中，会因等待JS的执行，判断是否阻止了事件的默认行为。<br>
这样的话，就不会立即交付任务与合成器线程，也就拖慢了渲染的速度。<br>
我们可以通过给事件加上 options 的 passive :true 选项,来告知浏览器，开发者不会阻止浏览器的默认行为，从而直接交付给合成器线程。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浏览器事件-passive]]></title>
        <id>https://czh.im/post/liu-lan-qi-shi-jian-passive/</id>
        <link href="https://czh.im/post/liu-lan-qi-shi-jian-passive/">
        </link>
        <updated>2020-05-18T02:25:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="浏览器事件-passive">浏览器事件-passive</h1>
<h2 id="targetaddeventlistnertypecallbackoptions">target.addEventListner('type',callback,options)</h2>
<h3 id="options">options</h3>
<ul>
<li>capture : 是否在事件的捕获阶段出发</li>
<li>once ： 最多只调用一次</li>
<li>passive ： 设置为true时，表示Listener永远不会调用preventDefault。如果listener仍调用，浏览器会在控制台发出一个警告。（MDN）</li>
</ul>
<h3 id="preventdefault">preventDefault</h3>
<blockquote>
<p>如果此事件没有被显式处理，它默认的动作也不应该照常执行。此事件还是继续传播，除非碰到事件侦听器调用stopPropagation() 或stopImmediatePropagation()，才停止传播。        ---MDN</p>
</blockquote>
<h3 id="render-process">render process</h3>
<p>在MDN文档中，对于passive和preventDefault只有简单的介绍，也就是简单的说明，preventDefault会组织默认事件，而passive表明我不会阻止默认事件。<br>
而在render process Compositing阶段，为了加速渲染，采用的是合成器渲染。也就是将一个页面分成多个图层，分别光栅化（渲染）。然后绘制成一个帧。<br>
假如在页面中，进行滚动，合成器就会预先将没有显示的部分，分层，光栅化，合成，发送到GPU，有GPU负责显示。<br>
如果我又在document元素上监听了scroll事件，此时，合成器就会先等待主线程执行JS，然后再进行上述操作，这样无疑会拖慢整个过程的平滑程度，甚至会出现掉帧。<br>
对合成器来说，监听事件的Dom对象所属的区域，称为 <strong>非快速滚动区域</strong> ，也就是执行慢的区域。<br>
而在监听事件中配置 passive : true.<br>
就会告诉合成器，这个地方可以先进行 分层，光栅化，合成，等一些列操作，等到事件出发的时候发送到GPU。而不用等待主线程执行完毕。</p>
<pre><code class="language-js">document.addEventListener('click',()=&gt;{},{passive:true});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[观察浏览器回调触发机制]]></title>
        <id>https://czh.im/post/guan-cha-liu-lan-qi-hui-diao-hong-fa-ji-zhi/</id>
        <link href="https://czh.im/post/guan-cha-liu-lan-qi-hui-diao-hong-fa-ji-zhi/">
        </link>
        <updated>2020-04-21T02:11:42.000Z</updated>
        <content type="html"><![CDATA[<p>这篇文章中，我们首先会通过一些API机制，观察回调执行的时机，在进行具体的分析。</p>
<h2 id="观察mo回调执行位置">观察MO回调执行位置</h2>
<p>我们先定义一些要使用的函数,用来观察observer()回调位置。</p>
<pre><code class="language-js">const observer = new MutationObserver(observe_callback);
let counter = 1;
const textNode = document.createTextNode(String(counter));

observer.observe(textNode, {
	characterData: true
});

function nextTick() {
        Promise.resolve().then(() =&gt; console.log('promise resolved'));
        timerFunc();
        setTimeout(() =&gt; console.log('timeout'));
    }

function changeNode() {
        counter = (counter + 1) % 2;
        textNode.data = String(counter);
}

function observe_callback() {
        console.log('observer alert');
}
</code></pre>
<p>我们猜测一下几种可能</p>
<ul>
<li>MO回调属于宏队列，在事件轮询中触发。</li>
<li>MO回调属于微队列，在事件轮询前触发。</li>
</ul>
<p>执行函数</p>
<pre><code class="language-js">nextTick();
</code></pre>
<p>执行结果</p>
<blockquote>
<p>promise resolved<br>
observer alert<br>
timeout</p>
</blockquote>
<p>通过调换 <strong>promise.resolve().then() <strong>和</strong>timerFunc</strong>  顺序</p>
<blockquote>
<p>observer alert<br>
promise resolved<br>
timeout</p>
</blockquote>
<p>发现 <strong>MO回调</strong> 和 <strong>promise回调</strong> 在微队列中执行顺序取决于注册顺序。</p>
<h2 id="将requestanimationframe回调加入观察顺序">将requestAnimationFrame回调加入观察顺序</h2>
<p>声明函数</p>
<pre><code class="language-js">function RAF_callback() {
	console.log('requestAnimationFrame callback');
}
</code></pre>
<p>修改函数</p>
<pre><code class="language-js">function nextTick() {
	requestAnimationFrame(RAF_callback) 	//推进RFA回调到下一帧的队列
    Promise.resolve().then(() =&gt; console.log('promise resolved')); //推进promise回调到下一帧队列
	changeNode();	//推进MO回调到下一帧队列
	setTimeout(() =&gt; console.log('timeout'));  //推进timeout回调到队列
}
</code></pre>
<p>函数执行</p>
<pre><code class="language-js">nextTick();
</code></pre>
<p>执行多次的结果</p>
<blockquote>
<p>promise resolved<br>
observer alert<br>
timeout<br>
requestAnimationFrame callback</p>
</blockquote>
<blockquote>
<p>promise resolved<br>
observer alert<br>
requestAnimationFrame callback	// -&gt;<br>
timeout												// -&gt;顺序发生了变化</p>
</blockquote>
<p>通过上面结果我们可以推测出</p>
<ul>
<li><strong>requestAnimationFrame回调</strong>属于宏队列事件，也就是该方法处于事件轮询中</li>
<li>而<strong>setTimeout回调</strong>和**requestAnimationFrame回调****具体谁先触发取决于，事件轮询到那个阶段。</li>
</ul>
<h2 id="分析">分析</h2>
<p>我们先分析一下，浏览器渲染每一帧都发生了什么。</p>
<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5Czhuo%5CDesktop%5C1158202-6c6f3bf9f9b2c5eb.webp" alt="" loading="lazy"></figure>
<p><strong>JavaScript</strong> -&gt; <strong>Style</strong> -&gt; <strong>Layout</strong> -&gt; <strong>Paint</strong> -&gt; <strong>Composite</strong></p>
<blockquote>
<ul>
<li>
<p>JavaScript : js代码的执行和计算(包括事件循环机制)</p>
</li>
<li>
<p>Style : 确定每个DOM元素所应用的css规则</p>
</li>
<li>
<p>Layout : 计算每个DOM元素在最终屏幕上显示的大小和位置。由于web页面的元素布局是相对的，所以其中任意	一个元素的位置发生变化，都会联动的引起其他元素发生变化，这个过程叫reflow(回流)。</p>
</li>
<li>
<p>Paint : 在多个层上绘制DOM元素的的文字、颜色、图像、边框和阴影等。</p>
</li>
<li>
<p>Composite : 按照合理的顺序合并图层然后显示到屏幕上</p>
<p>该部分来自 https://www.jianshu.com/p/a32b890c29b1</p>
</li>
</ul>
</blockquote>
<p>而 JavaScript 部分主要部分就是事件循环和微队列机制。</p>
<p>所以我们可以继续分析，以上函数回调的出发顺序。</p>
<p>当我们注册一个MO回调，promise回调，RFA回调，setTimeout回调，实在当前 JavaScript阶段注册。</p>
<p>而在下一帧在执行JavaScript阶段时，按照微队列和事件轮询机制触发回调。</p>
<blockquote>
<p>浏览器和node之间的事件轮询机制略有差异。</p>
<p>并且node版本不同也会有差异。在12.0以后基本和浏览器相同。</p>
<p>简单来说浏览器中的微队列在每个事件阶段<strong>之中</strong>，并且清空微队列在清空宏队列。</p>
<p>而12.0以前的node的微队列在每个事件<strong>之间</strong>，并且process.nextTick回调 优于 promise回调。</p>
</blockquote>
<pre><code class="language-js">   ┌───────────────────────────┐
┌─&gt;│           timers          │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │     pending callbacks     │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │       idle, prepare       │
│  └─────────────┬─────────────┘      ┌───────────────┐
│  ┌─────────────┴─────────────┐      │   incoming:   │
│  │           poll            │&lt;─────┤  connections, │
│  └─────────────┬─────────────┘      │   data, etc.  │
│  ┌─────────────┴─────────────┐      └───────────────┘
│  │           check           │
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
└──┤      close callbacks      │
   └───────────────────────────┘
   //该图表来自node官方文档
</code></pre>
<p>我们再来看之前注册的回调都发生了什么</p>
<p>JavaScript 阶段 注册了MO回调，RFA回调，setTimeout回调，promise回调。</p>
<p>然后在下一帧执行JavaScript阶段，触发事件轮询机制。按机制触发注册的回调。</p>
<ul>
<li>先清空微队列，执行了promise回调和MO回调</li>
<li>再看当前处于哪个事件阶段，清空宏队列。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[if块级作用域函数声明的副作用]]></title>
        <id>https://czh.im/post/if-kuai-ji-zuo-yong-yu-han-shu-sheng-ming-de-fu-zuo-yong/</id>
        <link href="https://czh.im/post/if-kuai-ji-zuo-yong-yu-han-shu-sheng-ming-de-fu-zuo-yong/">
        </link>
        <updated>2020-04-15T07:04:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="情景">情景</h2>
<p>在一般情况下，我们都会注意到函数声明时，会将函数提升到整个块级作用域的顶层。<br>
<code>js var a = 1; if(true){ a = 2; function a(){} a = 3; } console.log(a) // a = 2;</code><br>
一般我们默认为，function a (){}  语句 会提升到块级作用域的顶端<br>
<code>js var a = 1; if(true){ function a(){} a = 2; a =3; } console.log(a) // a = 3;</code></p>
<h2 id="副作用">副作用</h2>
<p>但是会发现，变量a的值发生了变化。其实是因为函数声明会有<strong>副作用</strong>声明的确会提升，但是在原本的位置上，仍然会对程序有一定的影响。<br>
也就是程序在执行到原本的位置时候，会将块级作用域中的同名局部变量，同步到全局中的同名全局变量。<br>
在同一层块级作用域，会发生多次同步。而在嵌套if作用域中，只会发生第一次同步。</p>
<pre><code class="language-js">    var a = 1;
    if(true){
        a = 2;
        function a(){}
        if(true){
            a = 3;
            function a(){var b ;}
        }
    }

    console.log(a) // a = 2;
</code></pre>
]]></content>
    </entry>
</feed>